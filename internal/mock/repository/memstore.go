// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository/memstore.go

// Package mock is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMemStorage is a mock of MemStorage interface.
type MockMemStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMemStorageMockRecorder
}

// MockMemStorageMockRecorder is the mock recorder for MockMemStorage.
type MockMemStorageMockRecorder struct {
	mock *MockMemStorage
}

// NewMockMemStorage creates a new mock instance.
func NewMockMemStorage(ctrl *gomock.Controller) *MockMemStorage {
	mock := &MockMemStorage{ctrl: ctrl}
	mock.recorder = &MockMemStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemStorage) EXPECT() *MockMemStorageMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockMemStorage) GetAllCounters() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockMemStorageMockRecorder) GetAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockMemStorage)(nil).GetAllCounters))
}

// GetAllGauges mocks base method.
func (m *MockMemStorage) GetAllGauges() (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockMemStorageMockRecorder) GetAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockMemStorage)(nil).GetAllGauges))
}

// GetCounter mocks base method.
func (m *MockMemStorage) GetCounter(k string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", k)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockMemStorageMockRecorder) GetCounter(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockMemStorage)(nil).GetCounter), k)
}

// GetGauge mocks base method.
func (m *MockMemStorage) GetGauge(k string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", k)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockMemStorageMockRecorder) GetGauge(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockMemStorage)(nil).GetGauge), k)
}

// Restore mocks base method.
func (m *MockMemStorage) Restore() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore")
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockMemStorageMockRecorder) Restore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockMemStorage)(nil).Restore))
}

// Save mocks base method.
func (m *MockMemStorage) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMemStorageMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMemStorage)(nil).Save))
}

// SetCounter mocks base method.
func (m *MockMemStorage) SetCounter(k string, v int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCounter", k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCounter indicates an expected call of SetCounter.
func (mr *MockMemStorageMockRecorder) SetCounter(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCounter", reflect.TypeOf((*MockMemStorage)(nil).SetCounter), k, v)
}

// SetGauge mocks base method.
func (m *MockMemStorage) SetGauge(k string, v float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockMemStorageMockRecorder) SetGauge(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockMemStorage)(nil).SetGauge), k, v)
}
